# 08_scatter_sex.py
import os, numpy as np, pandas as pd, matplotlib.pyplot as plt
from anndata import read_h5ad
import statsmodels.api as sm
from patsy import dmatrix

H5AD = r"/Users/fa/Library/Mobile Documents/com~apple~CloudDocs/cs-transfer/aki_ops_master_S1_survival.h5ad"
OUT  = r"/Users/fa/Library/Mobile Documents/com~apple~CloudDocs/cs-transfer/Diagramme"
os.makedirs(OUT, exist_ok=True)

adata = read_h5ad(H5AD)
obs = adata.obs

# --- robuste Spaltenzuordnung ---
aki_col  = next((c for c in ["AKI", "AKI_linked_0_7","aki_linked_0_7"] if c in obs.columns), None)
age_col  = next((c for c in ["age_years_at_op","age_years"] if c in obs.columns), None)
sex_col  = next((c for c in ["Sex","sex","gender"] if c in obs.columns), None)
if not all([aki_col, age_col, sex_col]):
    raise KeyError(f"Fehlende Spalten: AKI={aki_col}, age={age_col}, sex={sex_col}")

# Datenframe
df = pd.DataFrame({
    "AKI": pd.to_numeric(obs[aki_col], errors="coerce").astype(float),
    "age_years": pd.to_numeric(obs[age_col], errors="coerce").astype(float),
    "sex_raw": obs[sex_col].astype(str).str.strip().str.lower()
}).dropna()

# Geschlecht normalisieren
map_sex = {"f":"f","female":"f","w":"f","weiblich":"f","m":"m","male":"m","männlich":"m"}
df["sex"] = df["sex_raw"].map(map_sex).fillna(df["sex_raw"])
df = df[df["sex"].isin(["f","m"])].copy()

# ----------------- Plot 1: Roh-Scatter mit Jitter -----------------
rng = np.random.default_rng(42)
jit = (rng.random(len(df)) - 0.5) * 0.12  # ±0.06
y = df["AKI"] + jit

colors = {"f":"#0EA5A4", "m":"#2563EB"}  # f=teal, m=blue
plt.figure(figsize=(8,4.8), dpi=180)
for s in ["f","m"]:
    d = df[df["sex"]==s]
    plt.scatter(d["age_years"], d["AKI"] + (rng.random(len(d))-0.5)*0.12,
                s=12, alpha=0.7, label=("weiblich" if s=="f" else "männlich"),
                c=colors[s])

plt.yticks([0,1], ["kein AKI","AKI"])
plt.xlabel("Alter bei OP (Jahre)")
plt.ylabel("AKI (0–7 Tage)")
plt.title("Alter vs. AKI (0/1) – farblich nach Geschlecht")
plt.legend()
plt.tight_layout()
out1 = os.path.join(OUT, "scatter_age_vs_AKI_by_sex.png")
plt.savefig(out1, bbox_inches="tight"); plt.close()
print("Gespeichert:", out1)

# -------- Plot 2: Splines-Kurven + 95%-CI je Geschlecht ----------
plt.figure(figsize=(8,4.8), dpi=180)
for s in ["f","m"]:
    d = df[df["sex"]==s].dropna(subset=["AKI","age_years"])
    if len(d) < 40:
        continue
    X  = dmatrix("cr(age_years, df=5)", {"age_years": d["age_years"]}, return_type="dataframe")
    y  = d["AKI"].astype(int).values
    res = sm.GLM(y, sm.add_constant(X), family=sm.families.Binomial()).fit()

    grid = np.linspace(d["age_years"].min(), d["age_years"].max(), 350)
    Xg   = dmatrix("cr(age_years, df=5)", {"age_years": grid}, return_type="dataframe")
    sf   = res.get_prediction(sm.add_constant(Xg)).summary_frame()
    plt.plot(grid, sf["mean"], color=colors[s], linewidth=2,
             label=("weiblich" if s=="f" else "männlich"))
    plt.fill_between(grid, sf["mean_ci_lower"], sf["mean_ci_upper"],
                     alpha=0.25, color=colors[s])

plt.ylim(-0.02, 1.02)
plt.xlabel("Alter bei OP (Jahre)")
plt.ylabel("p(AKI 0–7 Tage)")
plt.title("Alter vs. p(AKI) – Splines + 95%-CI nach Geschlecht")
plt.legend()
plt.tight_layout()
out2 = os.path.join(OUT, "age_vs_AKI_spline_by_sex_ci.png")
plt.savefig(out2, bbox_inches="tight"); plt.close()
print("Gespeichert:", out2)
